/****** Object:  UserDefinedFunction [dbo].[CalculateDistance]    Script Date: 12/20/2013 5:22:32 PM ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CalculateDistance]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[CalculateDistance]
GO

/****** Object:  UserDefinedFunction [dbo].[CalculateDistance]    Script Date: 12/20/2013 5:22:32 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CalculateDistance]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'-------------------------------------------------------------------------
-- <copyright file="DistanceWizard.sql" company="ZIP Code Download, LLC">
--     Copyright (c) ZIP Code Download, LLC. All rights reserved.
-- </copyright>
-------------------------------------------------------------------------
CREATE FUNCTION [dbo].[CalculateDistance]
(
       @originLatitude decimal(18, 15),
       @originLongitude decimal(18, 15),
       @relativeLatitude decimal(18, 15),
       @relativeLongitude decimal(18, 15),
       @Measure varchar(12)
)
RETURNS decimal(18, 10)
AS BEGIN

       IF @originLatitude = @relativeLatitude AND @originLongitude = @relativeLongitude BEGIN
              RETURN 0; -- same lat/lon points, 0 distance
       END

       -- default unit of measurement will be miles
       IF @Measure = '''' BEGIN
              SELECT @Measure = ''Miles'';
       END
       
       -- lat and lon values must be within -180 and 180.
       IF @originLatitude < -180 OR @relativeLatitude < -180 OR @originLongitude < -180 OR @relativeLongitude < -180 BEGIN
              RETURN 0;
       END
       IF @originLatitude > 180 OR @relativeLatitude > 180 OR @originLongitude > 180 OR @relativeLongitude > 180 BEGIN
              RETURN 0;
       END

       DECLARE @x decimal(18,15);
       SELECT @x = 0.0;

       -- convert from degrees to radians
       SELECT @originLatitude = @originLatitude * PI() / 180.0,
           @originLongitude = @originLongitude * PI() / 180.0,
           @relativeLatitude = @relativeLatitude * PI() / 180.0,
           @relativeLongitude = @relativeLongitude * PI() / 180.0;

       -- distance formula, accurate to within 30 feet
       SELECT @x = Sin(@originLatitude) * Sin(@relativeLatitude) + Cos(@originLatitude) * Cos(@relativeLatitude) * Cos(@relativeLongitude - @originLongitude);

       IF 1 = @x BEGIN
              RETURN 0; -- same lat/long points
              -- not enough precision in SQL Server to detect this earlier in the function
       END

       DECLARE @EarthRadius decimal(7,3);
       SELECT @EarthRadius = 3963.189;
       
       DECLARE @distInSelectedUnit decimal(18, 10);    
       SELECT @distInSelectedUnit = @EarthRadius * (-1 * Atan(@x / Sqrt(1 - @x * @x)) + PI() / 2);
       
       -- convert the result to kilometers if desired
       IF @Measure = ''Kilometers'' BEGIN
              SELECT @distInSelectedUnit = dbo.MilesToKilometers(@distInSelectedUnit);
       END

       RETURN @distInSelectedUnit;
END

' 
END

GO


